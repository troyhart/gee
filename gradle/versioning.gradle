class ProjectVersion {
  java.text.SimpleDateFormat timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmssZ')
  //timestampFormat.timeZone = TimeZone.getTimeZone("UTC")

  Integer major
  Integer minor
  String itr
  Boolean release
  Date buildTime
  String buildTimestamp

  ProjectVersion(Project project, Integer major, Integer minor) {
    initBuildTime(project)
    this.major = major
    this.minor = minor
    this.release = Boolean.FALSE
    this.itr = buildTimestamp
  }

  ProjectVersion(Project project, Integer major, Integer minor, Boolean release) {
    this(project, major,minor)
    this.release = release
  }

  ProjectVersion(Project project, Integer major, Integer minor, String releaseCandidate) {
    this(project, major,minor)
    this.release = Boolean.FALSE
    this.itr = releaseCandidate
  }
  
  private void initBuildTime(Project project) {

    if (project.hasProperty("buildTimestamp")) {
      buildTime = timestampFormat.parse(project.buildTimestamp)
      buildTimestamp = project.buildTimestamp
    } else {
      File timestampFile = project.file("$project.buildDir/timestamp.txt")
      if (timestampFile.isFile()) {
        boolean uptodate = true
        def modified = timestampFile.lastModified()
        project.fileTree('src/main').visit {fte ->
          if (fte.file.isFile() && fte.lastModified > modified) {
            uptodate = false
            fte.stopVisiting()
          }
        }
        if (!uptodate) {
          timestampFile.setLastModified(new Date().time)
        }
      } else {
        timestampFile.parentFile.mkdirs()
        timestampFile.createNewFile()
      }
      
      buildTime = new Date(timestampFile.lastModified())
      buildTimestamp = timestampFormat.format(buildTime)
    }
  }
  
  @Override
  String toString() {
    "$major.$minor${release ? '' : "-$itr"}"
  }
}

ext.versionFile = file("version.properties")

task loadVersion {
  project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading version properties'
    
    if (!versionFile.exists()) {
      throw new GradleException("missing required version.properties: $versionFile.canonicalPath")
    }
    
    Properties versionProps = new Properties()
    
    versionFile.withInputStream { stream ->
      versionProps.load(stream)
    }
    
    new ProjectVersion(project, versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


task printVersion(group: 'versioning', description: 'Prints version information') << {   
    logger.quiet "Version: $version"
}
