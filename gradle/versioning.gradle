import java.text.SimpleDateFormat
import java.util.TimeZone

import org.gradle.api.GradleException
import org.gradle.api.execution.TaskExecutionGraph
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.bundling.Zip

class ProjectVersion
{
  static SimpleDateFormat timestampFormat = new SimpleDateFormat('yyyyMMddHHmmssZ')
  static {
    timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
  }
  
  File propertiesFile
  File timestampFile
  
  // version.properties attributes
  private Integer major
  private Integer minor
  private Integer patch
  // timestamp.txt lastModified attribute
  Date buildTime
  
  boolean release
  String buildLabel

  ProjectVersion(Project project) {
    propertiesFile = project.file("version.properties")
    if (!propertiesFile.exists()) {
      throw new GradleException("missing required version.properties: $propertiesFile.canonicalPath")
    }
    Properties versionProps = new Properties()
    propertiesFile.withInputStream { stream ->
      versionProps.load(stream)
    }
    
    this.major = versionProps.major.toInteger()
    this.minor = versionProps.minor.toInteger()
    this.patch = versionProps.patch.toInteger()

    timestampFile = project.file(".build.gradle.timestamp")
    if (timestampFile.isFile()) {
      boolean uptodate = true
      Date modified = new Date(timestampFile.lastModified())
      // If any of the main source has changed, then
      // the timestamp is not up to date
      project.fileTree('src/main').visit { fte ->
        if (fte.file.isFile() && fte.lastModified > modified.time) {
          uptodate = false
          fte.stopVisiting()
        }
      }
      if (!uptodate) {
        // update the last modified date on the timestamp file
        timestampFile.setLastModified(new Date().time)
      }
    } else {
      timestampFile.parentFile.mkdirs()
      timestampFile.createNewFile()
    }
    
    this.release = project.hasProperty('release') ? project.release : false
    
    this.buildTime = new Date(timestampFile.lastModified())
    if (project.hasProperty('releaseCandidate')) {
      this.buildLabel = project.releaseCandidate
    } else {
      this.buildLabel = "SNAPSHOT-${timestampFormat.format(buildTime)}"
    }
  }
  
  @Override
  String toString() {
    "$major.$minor.$patch${release ? '' : "-$buildLabel"}"
  }
}

// Add dynamic tasks for incrementing the major and minor version of 
// the project. The change is persisted in version.propertiesFile.
// 
tasks.addRule("Pattern: increment<Classifier>Version -- Increments the project version classifier.") { String taskName ->
  if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
    task(taskName) << {
      String classifier = (taskName - 'increment' - 'Version').toLowerCase()
      String currentVersion = project.version.toString()
      
      switch(classifier) {
        case 'major': ++project.version.major
                      break
        case 'minor': ++project.version.minor
                      break
        case 'patch': ++project.version.patch
                      break
        default: throw new GradleException("Invalid version type '$classifier'. Allowed types: ['Major', 'Minor']")
      }
      
      String newVersion = project.version.toString()
      logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"
      
      ant.propertyfile(file: project.version.propertiesFile) {
        entry(key: classifier, type: 'int', operation: '+', value: 1)
      }
    }
  }
}

// A configuration task that set's the project's version to the result of readVersion()
task loadVersion(group: 'versioning', description: 'An automatic configuraiton task; no need to execute this one.') {
  project.version = new ProjectVersion(project)
}